// renderer.js - X·ª≠ l√Ω logic UI trong Renderer Process

// Global variables
let currentScreenshot = null;
let currentDomSnapshot = null;
let currentActions = [];
let currentActionIndex = 0;
let isExecuting = false;
let screenshotDimensions = null;
let isAutoModeActive = false;
let autoModeInterval = null;

// ƒê·ª£i DOM load xong
document.addEventListener('DOMContentLoaded', () => {
    // Get all DOM elements
    const webview = document.getElementById('onluyen-webview');
    const captureAndSendBtn = document.getElementById('capture-and-send-btn');
    const apiKeyInput = document.getElementById('api-key');
    const aiModelSelect = document.getElementById('ai-model');
    const customPromptInput = document.getElementById('custom-prompt');
    const toggleApiKeyBtn = document.getElementById('toggle-api-key');
    const saveApiKeyBtn = document.getElementById('save-api-key');
    const screenshotContainer = document.getElementById('screenshot-container');
    const geminiResult = document.getElementById('gemini-result');
    const loading = document.getElementById('loading');
    const modeRadios = document.querySelectorAll('input[name="ai-mode"]');
    const actionControls = document.getElementById('action-controls');
    const executeAllBtn = document.getElementById('execute-all-btn');
    const executeStepBtn = document.getElementById('execute-step-btn');
    const stopBtn = document.getElementById('stop-btn');
    const actionsList = document.getElementById('actions-list');
    const clickOverlay = document.getElementById('click-overlay');
    
    // Navigation elements
    const backBtn = document.getElementById('back-btn');
    const forwardBtn = document.getElementById('forward-btn');
    const reloadBtn = document.getElementById('reload-btn');
    const homeBtn = document.getElementById('home-btn');
    const urlBar = document.getElementById('url-bar');
    const goBtn = document.getElementById('go-btn');

    // ============= API KEY MANAGEMENT =============
    
    // Load saved API key on startup
    const savedApiKey = localStorage.getItem('gemini_api_key');
    if (savedApiKey) {
        apiKeyInput.value = savedApiKey;
        showNotification('API Key ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ b·ªô nh·ªõ', 'success');
    }
    
    // Save API key
    saveApiKeyBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const apiKey = apiKeyInput.value.trim();
        if (apiKey) {
            localStorage.setItem('gemini_api_key', apiKey);
            showNotification('API Key ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!', 'success');
        } else {
            showNotification('Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc khi l∆∞u', 'warning');
        }
    });

    // Toggle hi·ªán/·∫©n API key
    toggleApiKeyBtn.addEventListener('click', (e) => {
        e.preventDefault();
        if (apiKeyInput.type === 'password') {
            apiKeyInput.type = 'text';
            toggleApiKeyBtn.textContent = '·∫®n';
        } else {
            apiKeyInput.type = 'password';
            toggleApiKeyBtn.textContent = 'Hi·ªán';
        }
    });

    // ============= AUTO MODE FUNCTIONS =============
    
    async function startAutoMode() {
        const apiKey = apiKeyInput.value.trim();
        if (!apiKey) {
            showNotification('Vui l√≤ng nh·∫≠p API Key ƒë·ªÉ s·ª≠ d·ª•ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông!', 'warning');
            return;
        }

        isAutoModeActive = true;
        showNotification('ü§ñ Ch·∫ø ƒë·ªô T·ª∞ ƒê·ªòNG ƒë√£ b·∫≠t - AI s·∫Ω t·ª± ƒë·ªông gi·∫£i m·ªçi c√¢u h·ªèi!', 'success');
        
        // Thay ƒë·ªïi giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã ƒëang ·ªü ch·∫ø ƒë·ªô auto
        captureAndSendBtn.innerHTML = 'üîÑ Auto Mode Active... (Click ƒë·ªÉ d·ª´ng)';
        captureAndSendBtn.style.background = 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)';
        
        // B·∫Øt ƒë·∫ßu chu k·ª≥ auto
        await performAutoModeCycle();
    }

    function stopAutoMode() {
        isAutoModeActive = false;
        isExecuting = false;
        if (autoModeInterval) {
            clearInterval(autoModeInterval);
            autoModeInterval = null;
        }
        
        showNotification('‚èπÔ∏è ƒê√£ d·ª´ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông', 'info');
        
        // Kh√¥i ph·ª•c giao di·ªán
        captureAndSendBtn.innerHTML = 'üì∏ Ch·ª•p v√† G·ª≠i AI';
        captureAndSendBtn.style.background = '';
    }

    async function performAutoModeCycle() {
        if (!isAutoModeActive) return;
        
        try {
            showLoading(true);
            
            // B∆∞·ªõc 1: Ch·ª•p m√†n h√¨nh
            console.log('üîÑ Auto Mode: Ch·ª•p m√†n h√¨nh...');
            const screenshotResult = await window.electronAPI.captureScreenshot();
            
            if (!screenshotResult.success) {
                throw new Error('Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh');
            }
            
            currentScreenshot = screenshotResult.data;
            screenshotDimensions = screenshotResult.dimensions;
            currentDomSnapshot = screenshotResult.domSnapshot;
            displayScreenshot(screenshotResult.data);
            
            // B∆∞·ªõc 2: Ph√¢n t√≠ch v·ªõi AI
            console.log('ü§ñ Auto Mode: G·ª≠i t·ªõi AI ƒë·ªÉ ph√¢n t√≠ch...');
            const model = aiModelSelect.value;
            
            // Prompt t·ª± ƒë·ªông cho ch·∫ø ƒë·ªô auto
            const autoPrompt = `Ch·∫ø ƒë·ªô T·ª∞ ƒê·ªòNG GI·∫¢I B√ÄI T·∫¨P:

1. T√¨m T·∫§T C·∫¢ c√¢u h·ªèi tr·∫Øc nghi·ªám v√† t·ª± lu·∫≠n tr√™n m√†n h√¨nh
2. V·ªõi M·ªñI c√¢u h·ªèi:
   - C√¢u tr·∫Øc nghi·ªám: Click v√†o ƒë√°p √°n ƒê√öNG
   - C√¢u ƒëi·ªÅn t·ª´/s·ªë: Nh·∫≠p ƒë√°p √°n v√†o √¥ input
   - C√¢u t·ª± lu·∫≠n: Nh·∫≠p c√¢u tr·∫£ l·ªùi v√†o textarea
3. T·∫°o NHI·ªÄU actions n·∫øu c·∫ßn (click + type cho m·ªói c√¢u)
4. N·∫øu c√≥ n√∫t "C√¢u ti·∫øp theo", "Next", "Ti·∫øp t·ª•c":
   - Th√™m action click v√†o n√∫t ƒë√≥ SAU KHI ƒë√£ l√†m xong
5. N·∫øu c√≥ n√∫t "N·ªôp b√†i", "Submit" v√† ƒë√£ l√†m xong:
   - Th√™m action click n·ªôp b√†i

QUAN TR·ªåNG: 
- Tr·∫£ v·ªÅ T·∫§T C·∫¢ actions c·∫ßn th·ª±c hi·ªán theo th·ª© t·ª±
- C√≥ th·ªÉ tr·∫£ v·ªÅ 10-20+ actions n·∫øu nhi·ªÅu c√¢u
- ∆Øu ti√™n ƒë·ªô ch√≠nh x√°c cao nh·∫•t
- N·∫øu kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o, tr·∫£ v·ªÅ actions r·ªóng[]`;

            const aiResult = await window.electronAPI.sendToGeminiWithActions(
                currentScreenshot, 
                apiKeyInput.value.trim(), 
                model, 
                autoPrompt, 
                screenshotDimensions, 
                currentDomSnapshot
            );
            
            if (!aiResult.success) {
                throw new Error(aiResult.error);
            }
            
            // B∆∞·ªõc 3: X·ª≠ l√Ω response v√† th·ª±c hi·ªán actions
            const actions = parseActionsFromResponse(aiResult.data);
            
            if (actions && actions.length > 0) {
                console.log(`‚úÖ Auto Mode: T√¨m th·∫•y ${actions.length} h√†nh ƒë·ªông`);
                currentActions = actions;
                displayActions(actions);
                
                // Th·ª±c hi·ªán t·∫•t c·∫£ actions
                await executeAllActionsAuto();
                
                // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ trang load
                await sleep(2000);
                
                // Ti·∫øp t·ª•c chu k·ª≥ n·∫øu v·∫´n ·ªü ch·∫ø ƒë·ªô auto
                if (isAutoModeActive) {
                    console.log('üîÑ Auto Mode: Ti·∫øp t·ª•c chu k·ª≥ m·ªõi...');
                    await performAutoModeCycle();
                }
            } else {
                console.log('‚ÑπÔ∏è Auto Mode: Kh√¥ng t√¨m th·∫•y h√†nh ƒë·ªông n√†o');
                
                // Th·ª≠ scroll xu·ªëng ƒë·ªÉ t√¨m c√¢u h·ªèi m·ªõi
                await window.electronAPI.performScroll(300);
                await sleep(1000);
                
                // Th·ª≠ l·∫°i n·∫øu v·∫´n ·ªü ch·∫ø ƒë·ªô auto
                if (isAutoModeActive) {
                    await performAutoModeCycle();
                }
            }
            
        } catch (error) {
            console.error('‚ùå Auto Mode Error:', error);
            showNotification(`L·ªói Auto Mode: ${error.message}`, 'error');
            stopAutoMode();
        } finally {
            showLoading(false);
        }
    }

    async function executeAllActionsAuto() {
        for (let i = 0; i < currentActions.length; i++) {
            if (!isAutoModeActive) break;
            
            currentActionIndex = i;
            updateActionDisplay();
            await executeAction(currentActions[i]);
            await sleep(500); // ƒê·ª£i gi·ªØa c√°c action
        }
        currentActionIndex = 0;
    }

    function parseActionsFromResponse(responseText) {
        try {
            const jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const data = JSON.parse(jsonMatch[0]);
                
                if (data.analysis) {
                    displayGeminiResult(data.analysis);
                }
                
                return data.actions || [];
            }
        } catch (error) {
            console.error('Error parsing actions:', error);
        }
        return [];
    }

    // ============= END AUTO MODE =============

    // X·ª≠ l√Ω thay ƒë·ªïi mode
    modeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            if (e.target.value === 'auto') {
                // K√≠ch ho·∫°t ch·∫ø ƒë·ªô auto
                actionControls.classList.remove('hidden');
                startAutoMode();
            } else if (e.target.value === 'action') {
                actionControls.classList.remove('hidden');
                stopAutoMode();
            } else {
                actionControls.classList.add('hidden');
                stopAutoMode();
            }
        });
    });

    // ============= WEBVIEWNAVIGATION =============
    
    // ƒêƒÉng k√Ω webview khi n√≥ load xong
    webview.addEventListener('dom-ready', () => {
        console.log('Webview ƒë√£ s·∫µn s√†ng');
        window.electronAPI.registerWebview(webview.getWebContentsId());
        captureAndSendBtn.disabled = false;
        
        // Update navigation buttons state
        updateNavigationButtons();
        
        // Update URL bar
        urlBar.value = webview.getURL();
        
        showNotification('·ª®ng d·ª•ng ƒë√£ s·∫µn s√†ng! AI Assistant c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn trang web.', 'success');
    });

    // Update URL bar khi navigate
    webview.addEventListener('did-navigate', (e) => {
        urlBar.value = e.url;
        updateNavigationButtons();
    });

    webview.addEventListener('did-navigate-in-page', (e) => {
        if (e.isMainFrame) {
            urlBar.value = e.url;
            updateNavigationButtons();
        }
    });

    // Update navigation buttons state
    function updateNavigationButtons() {
        backBtn.disabled = !webview.canGoBack();
        forwardBtn.disabled = !webview.canGoForward();
    }

    // Navigation button handlers
    backBtn.addEventListener('click', () => {
        if (webview.canGoBack()) {
            webview.goBack();
        }
    });

    forwardBtn.addEventListener('click', () => {
        if (webview.canGoForward()) {
            webview.goForward();
        }
    });

    reloadBtn.addEventListener('click', () => {
        webview.reload();
    });

    homeBtn.addEventListener('click', () => {
        webview.loadURL('https://app.onluyen.vn/');
    });

    // URL bar navigation
    goBtn.addEventListener('click', () => {
        navigateToUrl();
    });

    urlBar.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            navigateToUrl();
        }
    });

    function navigateToUrl() {
        let url = urlBar.value.trim();
        if (!url) return;
        
        // Add protocol if missing
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }
        
        try {
            const urlObj = new URL(url);
            webview.loadURL(urlObj.href);
        } catch (e) {
            showNotification('URL kh√¥ng h·ª£p l·ªá', 'error');
        }
    }

    // ============= END WEBVIEW NAVIGATION =============

    // X·ª≠ l√Ω l·ªói khi load webview
    webview.addEventListener('did-fail-load', (errorCode, errorDescription) => {
        console.error('L·ªói khi t·∫£i trang:', errorDescription);
        showNotification('Kh√¥ng th·ªÉ t·∫£i trang web. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.', 'error');
    });

    // X·ª≠ l√Ω s·ª± ki·ªán ch·ª•p v√† g·ª≠i
    captureAndSendBtn.addEventListener('click', async () => {
        // N·∫øu ƒëang ·ªü auto mode th√¨ d·ª´ng
        if (isAutoModeActive) {
            stopAutoMode();
            return;
        }

        const apiKey = apiKeyInput.value.trim();
        if (!apiKey) {
            showNotification('Vui l√≤ng nh·∫≠p API Key!', 'warning');
            apiKeyInput.focus();
            return;
        }

        try {
            showLoading(true);
            captureAndSendBtn.disabled = true;
            geminiResult.innerHTML = '<p class="placeholder">ƒêang ch·ª•p m√†n h√¨nh...</p>';

            // 1. Ch·ª•p m√†n h√¨nh
            const captureResult = await window.electronAPI.captureScreenshot();

            if (!captureResult.success) {
                showNotification(`L·ªói ch·ª•p m√†n h√¨nh: ${captureResult.error}`, 'error');
                return;
            }

            currentScreenshot = captureResult.data;
            screenshotDimensions = captureResult.dimensions;
            currentDomSnapshot = captureResult.domSnapshot;
            displayScreenshot(captureResult.data);
            showNotification('Ch·ª•p m√†n h√¨nh th√†nh c√¥ng! ƒêang g·ª≠i t·ªõi AI...', 'info');
            geminiResult.innerHTML = '<p class="placeholder">ƒêang g·ª≠i y√™u c·∫ßu t·ªõi Gemini AI...</p>';

            // 2. G·ª≠i t·ªõi Gemini
            const mode = document.querySelector('input[name="ai-mode"]:checked').value;
            const model = aiModelSelect.value;
            const customPrompt = customPromptInput.value.trim();

            let result;
            if (mode === 'action' || mode === 'auto') {
                result = await window.electronAPI.sendToGeminiWithActions(
                    currentScreenshot,
                    apiKey,
                    model,
                    customPrompt,
                    screenshotDimensions,
                    currentDomSnapshot
                );
            } else {
                result = await window.electronAPI.sendToGemini(
                    currentScreenshot,
                    apiKey,
                    model,
                    customPrompt
                );
            }

            if (result.success) {
                if (mode === 'action' || mode === 'auto') {
                    processActionResponse(result.data);
                } else {
                    displayGeminiResult(result.data);
                }
                showNotification('Ph√¢n t√≠ch th√†nh c√¥ng!', 'success');
            } else {
                showNotification(`L·ªói API: ${result.error}`, 'error');
                geminiResult.innerHTML = (
                    `<div class="error">
                        <strong>‚ùå L·ªói:</strong> ${result.error}
                    </div>`
                );
            }
        } catch (error) {
            console.error('L·ªói trong qu√° tr√¨nh ch·ª•p v√† g·ª≠i:', error);
            showNotification('C√≥ l·ªói nghi√™m tr·ªçng x·∫£y ra.', 'error');
        } finally {
            showLoading(false);
            captureAndSendBtn.disabled = false;
        }
    });

    // X·ª≠ l√Ω response c√≥ actions t·ª´ AI
    function processActionResponse(responseText) {
        try {
            const jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const data = JSON.parse(jsonMatch[0]);
                
                if (data.analysis) {
                    displayGeminiResult(data.analysis);
                }
                
                if (data.actions && data.actions.length > 0) {
                    currentActions = data.actions;
                    currentActionIndex = 0;
                    displayActions(data.actions);
                    
                    executeAllBtn.disabled = false;
                    executeStepBtn.disabled = false;
                    
                    // N·∫øu ·ªü ch·∫ø ƒë·ªô auto, t·ª± ƒë·ªông th·ª±c hi·ªán
                    if (isAutoModeActive) {
                        executeAllActionsAuto();
                    }
                } else {
                    showNotification('AI kh√¥ng ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông n√†o', 'info');
                }
            } else {
                displayGeminiResult(responseText);
            }
        } catch (error) {
            console.error('L·ªói parse response:', error);
            displayGeminiResult(responseText);
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch actions
    function displayActions(actions) {
        let html = '';
        actions.forEach((action, index) => {
            const statusClass = index < currentActionIndex ? 'completed' :
                index === currentActionIndex ? 'current' : 'pending';

            let detailsHtml = '';
            if (action.ai_id !== undefined) detailsHtml += `<span>ID: ${action.ai_id}</span>`;
            if (action.text) detailsHtml += `<span>Text: "${action.text}"</span>`;
            if (action.key) detailsHtml += `<span>Key: ${action.key}</span>`;
            if (action.deltaY !== undefined) detailsHtml += `<span>Scroll: ${action.deltaY}</span>`;

            html += (
                `
                <div class="action-item ${statusClass}" data-index="${index}">
                    <div class="action-header">
                        <span class="action-number">${index + 1}</span>
                        <span class="action-type ${action.type}">${action.type.toUpperCase()}</span>
                    </div>
                    <div class="action-details">
                        ${detailsHtml}
                    </div>
                    <div class="action-description">${action.description || ''}</div>
                </div>
            `
            );
        });

        actionsList.innerHTML = html;
    }

    // Th·ª±c hi·ªán t·∫•t c·∫£ actions
    executeAllBtn.addEventListener('click', async () => {
        if (currentActions.length === 0) return;

        isExecuting = true;
        executeAllBtn.disabled = true;
        executeStepBtn.disabled = true;

        for (let i = currentActionIndex; i < currentActions.length; i++) {
            if (!isExecuting) break;

            currentActionIndex = i;
            updateActionDisplay();
            await executeAction(currentActions[i]);

            await sleep(800);
        }

        isExecuting = false;
        executeAllBtn.disabled = false;
        executeStepBtn.disabled = false;

        if (currentActionIndex >= currentActions.length) {
            showNotification('ƒê√£ th·ª±c hi·ªán xong t·∫•t c·∫£ h√†nh ƒë·ªông!', 'success');
            currentActionIndex = 0;
        }
    });

    // Th·ª±c hi·ªán t·ª´ng action
    executeStepBtn.addEventListener('click', async () => {
        if (currentActionIndex >= currentActions.length) {
            currentActionIndex = 0;
            updateActionDisplay();
            return;
        }

        executeStepBtn.disabled = true;
        await executeAction(currentActions[currentActionIndex]);
        currentActionIndex++;
        updateActionDisplay();
        executeStepBtn.disabled = false;

        if (currentActionIndex >= currentActions.length) {
            showNotification('ƒê√£ th·ª±c hi·ªán xong t·∫•t c·∫£ h√†nh ƒë·ªông!', 'success');
        }
    });

    // D·ª´ng th·ª±c hi·ªán
    stopBtn.addEventListener('click', () => {
        isExecuting = false;
        isAutoModeActive = false;
        stopAutoMode();
        showNotification('ƒê√£ d·ª´ng th·ª±c hi·ªán', 'info');
    });

    // Th·ª±c hi·ªán m·ªôt action
    async function executeAction(action) {
        console.log('Th·ª±c hi·ªán action:', action);

        try {
            let result;
            let x, y;

            // L·∫•y t·ªça ƒë·ªô t·ª´ ai_id n·∫øu c√≥
            if (action.ai_id !== undefined) {
                if (!currentDomSnapshot) {
                    showNotification('L·ªói: Thi·∫øu DOM snapshot ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông.', 'error');
                    return;
                }
                const element = currentDomSnapshot.find(el => el.ai_id === action.ai_id);
                if (element) {
                    // S·ª≠ d·ª•ng centerX, centerY ƒë√£ ƒë∆∞·ª£c t√≠nh s·∫µn
                    x = element.rect.centerX || (element.rect.x + element.rect.width / 2);
                    y = element.rect.centerY || (element.rect.y + element.rect.height / 2);
                    console.log(`Element ${action.ai_id} found at center (${x}, ${y})`);
                } else {
                    showNotification(`L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ v·ªõi ai_id: ${action.ai_id}`, 'error');
                    return;
                }
            }

            // Th·ª±c hi·ªán action theo type
            switch (action.type) {
                case 'click':
                    if (x === undefined || y === undefined) {
                         showNotification(`L·ªói: H√†nh ƒë·ªông click thi·∫øu ai_id.`, 'error');
                         return;
                    }
                    showClickPosition(x, y);
                    result = await window.electronAPI.performClick(x, y);
                    await sleep(500);
                    hideClickPosition();
                    break;

                case 'type':
                     if (x === undefined || y === undefined) {
                         showNotification(`L·ªói: H√†nh ƒë·ªông type thi·∫øu ai_id.`, 'error');
                         return;
                    }
                    if (!action.text) {
                        showNotification(`L·ªói: H√†nh ƒë·ªông type thi·∫øu text.`, 'error');
                        return;
                    }
                    showClickPosition(x, y, 'type');
                    result = await window.electronAPI.performType(action.text, x, y);
                    await sleep(500);
                    hideClickPosition();
                    break;

                case 'clear':
                    if (x === undefined || y === undefined) {
                        showNotification(`L·ªói: H√†nh ƒë·ªông clear thi·∫øu ai_id.`, 'error');
                        return;
                    }
                    showClickPosition(x, y, 'clear');
                    result = await window.electronAPI.performClear(x, y);
                    await sleep(500);
                    hideClickPosition();
                    break;

                case 'scroll':
                    result = await window.electronAPI.performScroll(action.deltaY || 300);
                    break;

                case 'key':
                    result = await window.electronAPI.performKey(action.key || 'Enter');
                    break;

                case 'move':
                    // Skip move action for now
                    console.log('Move action skipped');
                    return;

                default:
                    console.warn('Unknown action type:', action.type);
                    return;
            }

            if (result && !result.success) {
                showNotification(`L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông: ${result.error}`, 'error');
            }
        } catch (error) {
            console.error('L·ªói khi th·ª±c hi·ªán action:', error);
            showNotification('L·ªói nghi√™m tr·ªçng khi th·ª±c hi·ªán h√†nh ƒë·ªông.', 'error');
        }
    }

    // Hi·ªÉn th·ªã v·ªã tr√≠ click/move tr√™n overlay
    function showClickPosition(x, y, type = 'click') {
        const webviewRect = webview.getBoundingClientRect();
        clickOverlay.style.left = `${x}px`;
        clickOverlay.style.top = `${y}px`;
        clickOverlay.className = `click-overlay ${type}`;
        clickOverlay.classList.remove('hidden');
    }

    function hideClickPosition() {
        clickOverlay.classList.add('hidden');
    }

    // Update hi·ªÉn th·ªã action ƒëang th·ª±c hi·ªán
    function updateActionDisplay() {
        const items = document.querySelectorAll('.action-item');
        items.forEach((item, index) => {
            item.classList.remove('completed', 'current', 'pending');
            if (index < currentActionIndex) {
                item.classList.add('completed');
            } else if (index === currentActionIndex) {
                item.classList.add('current');
            } else {
                item.classList.add('pending');
            }
        });
    }

    // Hi·ªÉn th·ªã ·∫£nh screenshot
    function displayScreenshot(imageData) {
        screenshotContainer.innerHTML = (
            `
            <img src="${imageData}" alt="Screenshot" />
            <div class="screenshot-info">
                <small>‚úì ƒê√£ ch·ª•p l√∫c: ${new Date().toLocaleTimeString('vi-VN')}</small>
                ${screenshotDimensions ? `<small>K√≠ch th∆∞·ªõc: ${screenshotDimensions.width}x${screenshotDimensions.height}</small>` : ''}
            </div>
        `
        );
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ Gemini
    function displayGeminiResult(text) {
        // Format text v·ªõi markdown c∆° b·∫£n
        const formattedText = text
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\n/g, '<br>');
        
        geminiResult.innerHTML = (
            `
            <div class="result-content">
                <div class="result-header">
                    <span class="badge badge-success">‚úì Ph√¢n t√≠ch th√†nh c√¥ng</span>
                    <small>${new Date().toLocaleTimeString('vi-VN')}</small>
                </div>
                <div class="result-body">
                    ${formattedText}
                </div>
            </div>
        `
        );
    }

    // Utility functions
    function showLoading(show) {
        if (show) {
            loading.classList.remove('hidden');
        } else {
            loading.classList.add('hidden');
        }
    }

    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        const icons = {
            success: '‚úì',
            error: '‚úó',
            warning: '‚ö†',
            info: '‚Ñπ'
        };
        
        notification.innerHTML = (
            `
            <span class="notification-icon">${icons[type]}</span>
            <span class="notification-message">${message}</span>
        `
        );
        
        document.body.appendChild(notification);
        
        // Auto remove notification after 3 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // ============= SETTINGS MODAL =============
    const settingsBtn = document.getElementById('settings-btn');
    const settingsModal = document.getElementById('settings-modal');
    const closeSettingsBtn = document.getElementById('close-settings');
    const modalBackdrop = document.querySelector('.modal-backdrop');

    settingsBtn.addEventListener('click', () => {
        settingsModal.classList.remove('hidden');
    });

    closeSettingsBtn.addEventListener('click', () => {
        settingsModal.classList.add('hidden');
    });

    modalBackdrop.addEventListener('click', () => {
        settingsModal.classList.add('hidden');
    });

    // ============= END SETTINGS MODAL =============

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + S ƒë·ªÉ ch·ª•p v√† g·ª≠i
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
            e.preventDefault();
            if (!captureAndSendBtn.disabled) {
                captureAndSendBtn.click();
            }
        }
        
        // Ctrl/Cmd + Enter ƒë·ªÉ g·ª≠i t·ªõi Gemini (gi·ªØ l·∫°i ph√≠m t·∫Øt n√†y)
        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
            e.preventDefault();
            if (!captureAndSendBtn.disabled) {
                captureAndSendBtn.click();
            }
        }
        
        // Ctrl/Cmd + A ƒë·ªÉ b·∫≠t/t·∫Øt Auto Mode
        if ((e.ctrlKey || e.metaKey) && e.key === 'a') {
            e.preventDefault();
            const autoRadio = document.querySelector('input[name="ai-mode"][value="auto"]');
            if (isAutoModeActive) {
                stopAutoMode();
                document.querySelector('input[name="ai-mode"][value="analyze"]').checked = true;
            } else {
                autoRadio.checked = true;
                autoRadio.dispatchEvent(new Event('change'));
            }
        }
        
        // Alt + Left Arrow ƒë·ªÉ quay l·∫°i
        if (e.altKey && e.key === 'ArrowLeft') {
            e.preventDefault();
            if (!backBtn.disabled) {
                backBtn.click();
            }
        }
        
        // Alt + Right Arrow ƒë·ªÉ ti·∫øn t·ªõi
        if (e.altKey && e.key === 'ArrowRight') {
            e.preventDefault();
            if (!forwardBtn.disabled) {
                forwardBtn.click();
            }
        }
        
        // Space ƒë·ªÉ th·ª±c hi·ªán action ti·∫øp theo (ch·ªâ khi kh√¥ng focus v√†o INPUT ho·∫∑c TEXTAREA)
        if (e.key === ' ' && 
            document.activeElement.tagName !== 'INPUT' && 
            document.activeElement.tagName !== 'TEXTAREA') {
            e.preventDefault();
            if (!executeStepBtn.disabled && currentActions.length > 0) {
                executeStepBtn.click();
            }
        }
    });
});


// Knowledge Base & RAG functionality
document.addEventListener('DOMContentLoaded', () => {
    const kbQuestionInput = document.getElementById('kb-question');
    const kbAnswerInput = document.getElementById('kb-answer');
    const saveKnowledgeBtn = document.getElementById('save-knowledge-btn');
    const ragQueryInput = document.getElementById('rag-query-input');
    const ragQueryBtn = document.getElementById('rag-query-btn');
    const ragResponseDiv = document.getElementById('rag-response');

    // Save knowledge to database
    saveKnowledgeBtn.addEventListener('click', async () => {
        const question = kbQuestionInput.value.trim();
        const answer = kbAnswerInput.value.trim();

        if (question && answer) {
            try {
                const newKnowledge = await window.electronAPI.saveKnowledge(question, answer);
                showNotification('ƒê√£ l∆∞u ki·∫øn th·ª©c th√†nh c√¥ng!', 'success');
                console.log('Saved knowledge:', newKnowledge);
                kbQuestionInput.value = '';
                kbAnswerInput.value = '';
            } catch (error) {
                console.error('Error saving knowledge:', error);
                showNotification('L·ªói khi l∆∞u ki·∫øn th·ª©c', 'error');
            }
        } else {
            showNotification('Vui l√≤ng nh·∫≠p c·∫£ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi', 'warning');
        }
    });

    // Query RAG system
    ragQueryBtn.addEventListener('click', async () => {
        const query = ragQueryInput.value.trim();
        if (query) {
            ragResponseDiv.innerHTML = '<p class="placeholder">ƒêang truy v·∫•n RAG...</p>';
            try {
                const response = await window.electronAPI.ragQuery(query);
                ragResponseDiv.innerText = response;
            } catch (error) {
                console.error('Error performing RAG query:', error);
                ragResponseDiv.innerText = `Error: ${error.message}`;
            }
        } else {
            showNotification('Vui l√≤ng nh·∫≠p c√¢u h·ªèi cho RAG', 'warning');
        }
    });

    // Helper function for notifications (local to this scope)
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        const icons = {
            success: '‚úì',
            error: '‚úó',
            warning: '‚ö†',
            info: '‚Ñπ'
        };
        
        notification.innerHTML = `
            <span class="notification-icon">${icons[type]}</span>
            <span class="notification-message">${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
});